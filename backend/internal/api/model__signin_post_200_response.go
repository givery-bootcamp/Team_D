/*
Twitter API

This is a sample server Twitter API server.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SigninPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SigninPost200Response{}

// SigninPost200Response struct for SigninPost200Response
type SigninPost200Response struct {
	User *User `json:"User,omitempty"`
}

// NewSigninPost200Response instantiates a new SigninPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSigninPost200Response() *SigninPost200Response {
	this := SigninPost200Response{}
	return &this
}

// NewSigninPost200ResponseWithDefaults instantiates a new SigninPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSigninPost200ResponseWithDefaults() *SigninPost200Response {
	this := SigninPost200Response{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SigninPost200Response) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigninPost200Response) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SigninPost200Response) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *SigninPost200Response) SetUser(v User) {
	o.User = &v
}

func (o SigninPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SigninPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["User"] = o.User
	}
	return toSerialize, nil
}

type NullableSigninPost200Response struct {
	value *SigninPost200Response
	isSet bool
}

func (v NullableSigninPost200Response) Get() *SigninPost200Response {
	return v.value
}

func (v *NullableSigninPost200Response) Set(val *SigninPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSigninPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSigninPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSigninPost200Response(val *SigninPost200Response) *NullableSigninPost200Response {
	return &NullableSigninPost200Response{value: val, isSet: true}
}

func (v NullableSigninPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSigninPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


